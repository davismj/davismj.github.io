<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Matthew James Davis</title>
    <description>Aurelia core team member Matthew James Davis is out to educate the community.</description>
    <link>http://davismj.me/</link>
    <atom:link href="http://davismj.me//feed.xml" rel="self" type="application/rss+xml" />
    
      <item>
        <title>Sentry, an Aurelia Template</title>
        <description>&lt;p&gt;Though everyone can make something work, there is definitely a right way to handle authentication in an Aurelia app. Sentry is a working compilation of answers to some of the most frequently asked questions around Aurelia and Authentication.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/davismj/sentry&quot;&gt;Source is available in GitHub.&lt;/a&gt;&lt;/p&gt;

&lt;iframe height=&quot;400&quot; width=&quot;1024&quot; src=&quot;http://davismj.github.io/sentry&quot;&gt;&lt;/iframe&gt;</description>
        <pubDate>Tue, 29 Sep 2015 00:00:00 -0400</pubDate>
        <link>http://davismj.me//blog/sentry/</link>
        <guid isPermaLink="true">http://davismj.me//blog/sentry/</guid>
      </item>
    
      <item>
        <title>Aurelia Authentication&amp;#58; Sessions.</title>
        <description>&lt;p&gt;Last time we looked at best practices for creating a login page leveraging Aurelia roots. This time we&amp;#39;re going to look at how to build a service that can handle tracking information about authentication between sessions, and can communicate to the various parts of your application&lt;/p&gt;

&lt;h1&gt;Singletons and Transients&lt;/h1&gt;

&lt;p&gt;Aurelia has two modes of loading classes (or modules) with the dependency injection framework. One is &lt;em&gt;transient&lt;/em&gt; mode, which means that a new instance of the class is created every time the dependency is injected. The other is &lt;em&gt;singleton&lt;/em&gt; mode, which means that only one instance is created and the same instance is passed to each depndency injection. In general, transients should only be used when you expect to have multiple instances of that class alive in your app at the same time. The default mode is singleton.&lt;/p&gt;

&lt;h1&gt;Configuring AuthService&lt;/h1&gt;

&lt;p&gt;First, we&amp;#39;re going to need to define a few parameters to pass to AuthService:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Where the service is located.&lt;/li&gt;
&lt;li&gt;What endpoints are available.&lt;/li&gt;
&lt;li&gt;Where to store the session information.&lt;/li&gt;
&lt;/ol&gt;

&lt;h4&gt;src/config.js&lt;/h4&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// If this service was abstracted to a plugin, we would instead pass&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// this information to the plugin&amp;#39;s config function. For now, we &lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// export this object for simplicity. In a larger application, there&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// would be other, unrelated settings in the config as well.&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;baseUrl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;http://www.mocky.io/v2/&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;loginUrl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;560122ef9635789e120aa366&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;tokenName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;ah12h3&amp;#39;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h1&gt;Creating the AuthService&lt;/h1&gt;

&lt;p&gt;We want to create a general &lt;code&gt;AuthService&lt;/code&gt; that any part of the application can use to perform authentication related tasks; since there is one service throughout the application, it needs to be a singleton. &lt;/p&gt;

&lt;p&gt;There are a few things the &lt;code&gt;AuthService&lt;/code&gt; needs to do:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;On load, it needs to remember the most recent login information.&lt;/li&gt;
&lt;li&gt;It needs to expose login and logout functions.&lt;/li&gt;
&lt;li&gt;Any part of the aurelia app should be able to query for current status.&lt;/li&gt;
&lt;/ol&gt;

&lt;h4&gt;src/AuthService.js&lt;/h4&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kr&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;config&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;config&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;err&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;inject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Aurelia&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;HttpClient&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;AuthService&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;// As soon as the AuthService is created, we query local storage to&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// see if the login information has been stored. If so, we immediately&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// load it into the session object on the AuthService.&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;constructor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Aurelia&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;HttpClient&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;nx&quot;&gt;HttpClient&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;configure&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;http&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;http&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;withBaseUrl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;baseUrl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;http&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;HttpClient&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;app&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Aurelia&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;session&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;JSON&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;parse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;localStorage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;tokenName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;// The login function needs to abstract away all of the details about&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// how we track and expose login information. A more advanced app might&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// want the login function to pass back a promise so it can perform&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// additional tasks on login, but we keep things simple here.&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;login&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;username&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;password&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;http&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;post&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;loginUrl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;username&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;password&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;content&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;session&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;localStorage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;tokenName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;JSON&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;stringify&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;session&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;session&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;session&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;setRoot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;app&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;// The logout function reverses the actions of the login function. &lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// It is less common for logout to be async, but logout could also&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// return a promise if there were a need.&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;logout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;localStorage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;tokenName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;session&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;setRoot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;login&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;// A basic method for exposing information to other modules.  &lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;isAuthenticated&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;session&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!==&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h1&gt;Using the AuthService&lt;/h1&gt;

&lt;p&gt;Now we can begin using the &lt;code&gt;AuthService&lt;/code&gt; module throughout our application. &lt;/p&gt;

&lt;h4&gt;src/main.js&lt;/h4&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// After starting the aurelia, we can request the AuthService directly&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// from the DI container on the aurelia object. We can then set the &lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// correct root by querying the AuthService&amp;#39;s isAuthenticated method.&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;aurelia&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;auth&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;aurelia&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;container&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;AuthService&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;root&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;auth&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;isAuthenticated&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;app&amp;#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;login&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;aurelia&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;setRoot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;root&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;src/app.html&lt;/h4&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;c&quot;&gt;&amp;lt;!-- We can call the logout() method directly from the AuthService. --&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;ul&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;nav navbar-nav navbar-right&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;li&amp;gt;&amp;lt;a&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;#&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;click&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;delegate=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;auth.logout()&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;Log Out&lt;span class=&quot;nt&quot;&gt;&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/ul&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;src/login.js&lt;/h4&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// Or, if we want to add additional logic to the function, &lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// we can call it within another method on our view model.&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Login&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;login&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;username&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;password&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;auth&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;login&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;username&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;password&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;error&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;Please enter a username and password.&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h1&gt;Notes&lt;/h1&gt;

&lt;p&gt;There are a few placeholders in the source code that I may dive into in another blog post. In particular, the &lt;code&gt;can(permission)&lt;/code&gt; method on the login service can be used in conjunction with an enum or object and a bitmask on the server to greatly simplify handling permissions. Also, the mock API passes back a hash value. An even better practice would be to add a call to a verification endpoint that takes in a hash and returns the correlated session object. This would prevent a user from tampering with local storage. However, for both of these items, &lt;strong&gt;you must always double check a user&amp;#39;s permission on the server&lt;/strong&gt;. You can never be sure that the client hasn&amp;#39;t been hacked; this is one of the drawbacks to single-page applications.&lt;/p&gt;

&lt;p&gt;When writing this blog, I stumbled onto a bug where logging in, out, and back in again caused the router-view in app.html to deactivate permanently. I hvae created an issue here: &lt;a href=&quot;https://github.com/aurelia/framework/issues/212&quot;&gt;https://github.com/aurelia/framework/issues/212&lt;/a&gt;.&lt;/p&gt;

&lt;h1&gt;Links&lt;/h1&gt;

&lt;p&gt;&lt;a href=&quot;https://davismj.github.io/aurelia-session-example&quot;&gt;Working Demo&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;https://github.com/davismj/aurelia-session-example&quot;&gt;Full Source in Github&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;http://www.mocky.io/&quot;&gt;App for Mocking REST APIs&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;http://blog.opinionatedapps.com/aureliauth-a-token-based-authentication-plugin-for-aurelia/&quot;&gt;Aurelia OAuth2 Plugin&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;http://davismj.me/blog/aurelia-login-best-practices-pt-1/&quot;&gt;Aurelia Auth Best Practices: Multiple Shells&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;http://www.cheatography.com/erikch/cheat-sheets/aurelia-getting-started/&quot;&gt;Aurelia Getting Started Cheat Sheet&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;http://hobbit-on-aurelia.net/appstate/&quot;&gt;Michael Lambert on App State Services&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;http://patrickwalters.net/my-best-practices-for-aurelia-application-structure/&quot;&gt;Patrick Walters on App Organization&lt;/a&gt;&lt;br /&gt;&lt;/p&gt;
</description>
        <pubDate>Tue, 22 Sep 2015 00:00:00 -0400</pubDate>
        <link>http://davismj.me//blog/aurelia-auth-pt2/</link>
        <guid isPermaLink="true">http://davismj.me//blog/aurelia-auth-pt2/</guid>
      </item>
    
      <item>
        <title>Aurelia Authentication&amp;#58; Multiple shells.</title>
        <description>&lt;p&gt;Almost everyone building an Aurelia application wants to include some form of authentication. Aurelia includes a number of powerful features for handling authentication securely and effectively. We&amp;#39;re going to look at the concept of including multiple shells, or root view models, within an Aurelia app to keep your app logic separate from your login logic.&lt;/p&gt;

&lt;h1&gt;What is a Shell?&lt;/h1&gt;

&lt;p&gt;The shell, sometimes called the root, is the root view model of your page. The Aurelia bootstrapper is designed to automatically get your app initialized using &lt;code&gt;src/app.js&lt;/code&gt; as the root. However, if you&amp;#39;d like to customize your app initialization, you can pass a javascript file to your body tag, for example &lt;code&gt;aurelia-app=&amp;quot;main&amp;quot;&lt;/code&gt;, to instruct Aurelia to load in a custom intialization file.&lt;/p&gt;

&lt;h4&gt;src/main.js&lt;/h4&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kr&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;configure&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;aurelia&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;aurelia&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;use&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;standardConfiguration&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;developmentLogging&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;// This line tells Aurelia to start up and then set the root view model for&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// our application. If no name is given, it defaults to loading &amp;#39;app.js&amp;#39;.&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;aurelia&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;app&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;setRoot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h1&gt;The Login Shell&lt;/h1&gt;

&lt;p&gt;Instead of sending the user directly into our application, we&amp;#39;re going to request them to login first by sending them to a login shell instead. Once our user logs in, then they will be redirected to the main application. First, lets modify our initialization file to load in to direct to the login shell.&lt;/p&gt;

&lt;h4&gt;src/main.js&lt;/h4&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kr&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;configure&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;aurelia&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;aurelia&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;use&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;standardConfiguration&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;developmentLogging&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

  &lt;span class=&quot;nx&quot;&gt;aurelia&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;app&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;setRoot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;login&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Next, let&amp;#39;s create a login shell. Your shell will probably be more interesting than mine, but I&amp;#39;m going to keep my shell to a minimum. It will only have login prompt and a function that will login and redirect to the app.&lt;/p&gt;

&lt;h4&gt;src/login.js&lt;/h4&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kr&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;inject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Aurelia&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;aurelia-framework&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// First, we must inject the Aurelia object. This is the same Aurelia object&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// passed into our configure function on main.js.&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;inject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Aurelia&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Login&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

  &lt;span class=&quot;nx&quot;&gt;username&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;password&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;error&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;nx&quot;&gt;constructor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;aurelia&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// Once we have access to the Aurelia object, we can use it from&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// within our login function to set the new root view model to &lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// our main App on succesful login.&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;login&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;username&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;password&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;aurelia&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;setRoot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;app&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;error&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;Please enter a username and password.&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And, of course, view model will be bound to &lt;code&gt;login.html&lt;/code&gt;. Since this view is actually the root view, we do not need to try to use any special tricks to customize our view around any other views; we are free to include anything we want into this view and it will always remain completely separate from our main app.&lt;/p&gt;

&lt;h1&gt;Notes&lt;/h1&gt;

&lt;p&gt;Notice that we don&amp;#39;t define a router in our login. In fact, there is no router in our app at all. That means that instead of merely blocking a user from accessing a route, the route doesn&amp;#39;t exist, which means more security. Additionally, this means you can send a user to a route that doesn&amp;#39;t exist on the login shell and redirect them to that specific route after login.&lt;/p&gt;

&lt;h1&gt;Links&lt;/h1&gt;

&lt;p&gt;&lt;a href=&quot;http://davismj.github.io/skeleton-navigation-login-shell&quot;&gt;Working Demo&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;https://github.com/davismj/skeleton-navigation-login-shell&quot;&gt;Full source on GitHub&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;http://aurelia.io/docs.html#startup-and-configuration&quot;&gt;Intialization Docs&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;http://aurelia.io/docs.html#the-aurelia-object&quot;&gt;Aurelia Object Docs&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Sat, 15 Aug 2015 00:00:00 -0400</pubDate>
        <link>http://davismj.me//blog/aurelia-login-best-practices-pt-1/</link>
        <guid isPermaLink="true">http://davismj.me//blog/aurelia-login-best-practices-pt-1/</guid>
      </item>
    
      <item>
        <title>Using a Gmail alias</title>
        <description>&lt;h1&gt;What&amp;#39;s so good about an alias?&lt;/h1&gt;

&lt;p&gt;Since I&amp;#39;ve been working for myself, I&amp;#39;ve found myself sending out small bug and feature reports more often lately. I tried appending a small message requesting a bitcoin donation to one of these emails, and the recipient in fact donated. I think I might be on to something!&lt;/p&gt;

&lt;h1&gt;How to do it&lt;/h1&gt;

&lt;p&gt;In a perfect world, I would be able to create a special email account for sending out these bug reports that would have a tip message signature. After looking into various options available to me, I found that this functionality comes with Gmail out of the box! Here&amp;#39;s what you do:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Open Gmail settings and navigate to the &lt;code&gt;Accounts and Import&lt;/code&gt; tab.&lt;/li&gt;
&lt;li&gt;Under the &lt;code&gt;Send Mail As&lt;/code&gt; section, click &lt;code&gt;Add another email address you own&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;For &lt;code&gt;Email address&lt;/code&gt;, enter [your gmail address]+[alias]@gmail.com, keep &lt;code&gt;Treat as an alias&lt;/code&gt; checked, and click &lt;code&gt;Next Step »&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Refresh the page. Then, open settings and navigate to the &lt;code&gt;General&lt;/code&gt; tab.&lt;/li&gt;
&lt;li&gt;Under the &lt;code&gt;Signature&lt;/code&gt; section, select your new alias from the drop down. Enter your desired signature and click &lt;code&gt;Save Changes&lt;/code&gt; at the bottom.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Now, when sending an email, select the alias in the from dropdown and your signature will automatically be appended. In fact, this alias is treated like a completely separate email account in Gmail, so anything you can do with a specific email account, you can do with the alias. This includes signatures, labels, and filtering.&lt;/p&gt;

&lt;h1&gt;Links&lt;/h1&gt;

&lt;p&gt;&lt;a href=&quot;https://support.google.com/mail/answer/22370?hl=en&quot;&gt;Send mail from a different address or alias - Gmail Help&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Fri, 14 Aug 2015 00:00:00 -0400</pubDate>
        <link>http://davismj.me//blog/gmail-alias/</link>
        <guid isPermaLink="true">http://davismj.me//blog/gmail-alias/</guid>
      </item>
    
      <item>
        <title>Deploy Aurelia to GitHub Pages</title>
        <description>&lt;p&gt;You&amp;#39;ve just completed your first Aurelia app, and now it is time to show the world that you are Aurelia enabled. GitHub page is a quick, easy, and free hosting solution, perfect for showing off a demo, and today we&amp;#39;re going to walk through this process. &lt;/p&gt;

&lt;p&gt;I&amp;#39;m going to show two different methods: (a) using the git command line and (b) using TortoiseGit, a git gui for Windows. It is not a common tool, but I personally love it, so I wanted to demonstrate how to use it as well as contrast it with the command line.&lt;/p&gt;

&lt;p&gt;For the sake of example, we&amp;#39;re going to use a fork of the skeleton-navigation project. Head over to the &lt;a href=&quot;https://github.com/aurelia/skeleton-navigation&quot;&gt;Aurelia skeleton-navigation repo&lt;/a&gt;, click &amp;quot;fork&amp;quot; in the upper right, and choose the account in which to fork the repo (probably your user account).&lt;/p&gt;

&lt;h1&gt;Using git command line&lt;/h1&gt;

&lt;h2&gt;Initialize GitHub repo (optional)&lt;/h2&gt;

&lt;p&gt;First, we are going to clone the newly forked repo locally. The first step will be to navigate to the folder where we will want to clone the repo locally.&lt;/p&gt;

&lt;p&gt;Click the navigation bar and type &lt;code&gt;cmd&lt;/code&gt; to open the command line.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/blog/2015-4-24-ss1.png&quot; alt=&quot;Opening a command window from the Windows Explorer&quot;&gt;&lt;/p&gt;

&lt;p&gt;Type &lt;code&gt;git clone https://github.com/your-username/skeleton-navigation&lt;/code&gt; to clone the repo at this location. Make sure you use the correct url for your repo.&lt;/p&gt;

&lt;p&gt;Because we are using the skeleton-navigation project, we will need to install the dependencies and build the project. To do this, type &lt;code&gt;npm install -g gulp jspm&lt;/code&gt;, then &lt;code&gt;npm install&lt;/code&gt;, then &lt;code&gt;jspm install -y&lt;/code&gt;, then &lt;code&gt;gulp build&lt;/code&gt;.&lt;/p&gt;

&lt;h2&gt;Configure the GitHub Pages branch&lt;/h2&gt;

&lt;p&gt;GitHub pages will serve whatever is committed to the gh-pages branch, so we will create the branch and add the built files and dependencies to the branch.&lt;/p&gt;

&lt;p&gt;Type &lt;code&gt;git branch gh-pages&lt;/code&gt; to create the branch.
Type &lt;code&gt;git checkout gh-pages&lt;/code&gt; to switch to the branch.&lt;/p&gt;

&lt;p&gt;Edit the &lt;code&gt;.gitignore&lt;/code&gt; file and comment out the &lt;code&gt;jspm_packages&lt;/code&gt; and &lt;code&gt;dist&lt;/code&gt; paths to tell git to include files in these paths in the gh-pages branch.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;node_modules
# jspm_packages
bower_components
.idea
.DS_STORE
# /dist
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Type &lt;code&gt;git add *&lt;/code&gt; to add the new files to the branch.
Type &lt;code&gt;git commit -m &amp;#39;Initalizing GitHub pages&amp;#39;&lt;/code&gt; to commit to the brnach with the given commit message.
Type &lt;code&gt;git push origin gh-pages&lt;/code&gt; to push to a new gh-pages branch on GitHub.&lt;/p&gt;

&lt;p&gt;Your new project will be hosted at your-username.github.io/skeleton-navigation.&lt;/p&gt;

&lt;h1&gt;Using TortoiseGit&lt;/h1&gt;

&lt;p&gt;First, we are going to clone the newly forked repo locally. The first step will be to navigate to the folder where we will want to clone the repo locally. Right click within the folder and click &amp;quot;Git Clone&amp;quot;. Make sure that the URL is set to the URL of your Repo and the Directory is set to the desired directory.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/blog/2015-4-24-ss2.png&quot; alt=&quot;Git Clone dialog&quot;&gt;&lt;/p&gt;

&lt;p&gt;Because we are using the skeleton-navigation project, we will need to install the dependencies and build the project. To do this, open a command prompt in the project directory and type &lt;code&gt;npm install -g gulp jspm&lt;/code&gt;, then &lt;code&gt;npm install&lt;/code&gt;, then &lt;code&gt;jspm install -y&lt;/code&gt;, then &lt;code&gt;gulp build&lt;/code&gt;.&lt;/p&gt;

&lt;h2&gt;Configure the GitHub Pages branch&lt;/h2&gt;

&lt;p&gt;GitHub pages will serve whatever is committed to the gh-pages branch, so we will create the branch and add the built files and dependencies to the branch.&lt;/p&gt;

&lt;p&gt;Right click the project directory and navigate TortoiseGit &amp;gt; Create Branch. Name the branch &amp;quot;gh-pages&amp;quot; and hit okay.&lt;/p&gt;

&lt;p&gt;Right click the projet directory again and navigate TortoiseGit &amp;gt; Switch/Checkout. Select the &amp;quot;gh-pages&amp;quot; branch from the dropdown and hit okay.&lt;/p&gt;

&lt;p&gt;Inside the project directory, right click the jspm_packages directory and navigate TortoiseGit &amp;gt; Add. Check &amp;quot;Include ignored files&amp;quot; and then &amp;quot;Select/deselect all&amp;quot; to select all. Repeat this process for the dist folder.&lt;/p&gt;

&lt;p&gt;Now, right click any folder and hit commit. Give the commit a message like &amp;quot;Initalizing GitHub pages&amp;quot; and hit Okay. In the window that pops up. Hit push and hit okay.&lt;/p&gt;

&lt;p&gt;Your new project will be hosted at your-username.github.io/skeleton-navigation.&lt;/p&gt;

&lt;h1&gt;Notes&lt;/h1&gt;

&lt;p&gt;The git command line portion of this blog was largely adapted from a &lt;a href=&quot;http://stackoverflow.com/a/29858036/1981050&quot;&gt;StackOverflow post&lt;/a&gt; by &lt;a href=&quot;http://stackoverflow.com/users/2597114/talves&quot;&gt;Talves&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;As Talves noted, this is not how you want to deploy your production application. There are, however, a few good uses for GitHub pages. For one, examples for blogs. It is excellent to be able to see both the source code and the code in action. Another, however, is a blog. This particular website is hosted on GitHub pages using a Ruby-based platform called Jekyll.&lt;/p&gt;

&lt;h1&gt;Links&lt;/h1&gt;

&lt;p&gt;&lt;a href=&quot;http://stackoverflow.com/questions/29831885/how-to-deploy-aurelia-to-github-pages-gh-pages#29858036&quot;&gt;StackOverflow post from which this blog was derived&lt;/a&gt;
&lt;a href=&quot;https://help.github.com/articles/user-organization-and-project-pages/&quot;&gt;GitHub Pages&lt;/a&gt;&lt;br/&gt;
&lt;a href=&quot;https://help.github.com/articles/using-jekyll-with-pages/&quot;&gt;GitHub Pages with Jekyll&lt;/a&gt;&lt;br/&gt;
&lt;a href=&quot;http://git-scm.com/documentation&quot;&gt;git Documentation&lt;/a&gt;&lt;br/&gt;
&lt;a href=&quot;https://code.google.com/p/tortoisegit/&quot;&gt;TortoiseGit&lt;/a&gt;&lt;br/&gt;
&lt;a href=&quot;http://davismj.github.io/skeleton-navigation/&quot;&gt;Demo&lt;/a&gt;&lt;br/&gt;&lt;/p&gt;
</description>
        <pubDate>Fri, 24 Apr 2015 00:00:00 -0400</pubDate>
        <link>http://davismj.me//blog/deploy-to-gh-pages/</link>
        <guid isPermaLink="true">http://davismj.me//blog/deploy-to-gh-pages/</guid>
      </item>
    
      <item>
        <title>Using Sass with Aurelia</title>
        <description>&lt;p&gt;Sass is a common and powerful css preprocessor that helps keep styles and views clean and readable. The Aurelia skeleton navigation project doesn&amp;#39;t come with Sass support out of the box. Fortunately, adding Sass support to the Aurelia development workflow is quick and easy. Let&amp;#39;s take a look at the high level steps we will need to go through:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Install the Sass compiler&lt;/li&gt;
&lt;li&gt;Add Sass to our project&lt;/li&gt;
&lt;li&gt;Configure our paths&lt;/li&gt;
&lt;li&gt;Add the build task&lt;/li&gt;
&lt;/ol&gt;

&lt;h1&gt;Installing the Sass Compiler&lt;/h1&gt;

&lt;p&gt;Since the skeleton navigation project comes with a pretty elaborate gulpfile, we install gulp-sass, a sass compiler that hooks into gulp. Let&amp;#39;s add the package to our &lt;code&gt;package.json&lt;/code&gt; and run &lt;code&gt;npm install&lt;/code&gt; to install the package.&lt;/p&gt;

&lt;h4&gt;package.json&lt;/h4&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-json&quot; data-lang=&quot;json&quot;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;aurelia-skeleton-navigation&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;quot;version&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;0.12.0&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;err&quot;&gt;...&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;quot;devDependencies&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;err&quot;&gt;...&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;quot;gulp-sass&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;^1.3.3&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;err&quot;&gt;...&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;err&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h1&gt;Adding Sass to our Project&lt;/h1&gt;

&lt;p&gt;The skeleton navigation project comes equipped with a css file at &lt;code&gt;styles/styles.css&lt;/code&gt;. Let&amp;#39;s rename this file to &lt;code&gt;styles.sass&lt;/code&gt; and update the syntax to match sass syntax.&lt;/p&gt;

&lt;h4&gt;styles.sass&lt;/h4&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sass&quot; data-lang=&quot;sass&quot;&gt;&lt;span class=&quot;nt&quot;&gt;body&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;margin&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;

&lt;span class=&quot;nc&quot;&gt;.splash&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;text-align&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;center&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;margin&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;box-sizing&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;border&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;box&lt;/span&gt;

    &lt;span class=&quot;nc&quot;&gt;.message&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;font-size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;72&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;px&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;line-height&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;72&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;px&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;text-shadow&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;rgba&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;.5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;15&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;px&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;text-transform&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;uppercase&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;font-family&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Helvetica Neue&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Helvetica&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Arial&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;sans-serif&lt;/span&gt;

    &lt;span class=&quot;nc&quot;&gt;.fa-spinner&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;text-align&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;center&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;display&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;inline&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;block&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;font-size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;72&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;px&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;margin-top&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;50&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;px&lt;/span&gt;

&lt;span class=&quot;nc&quot;&gt;.page-host&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;position&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;absolute&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;right&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;top&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;50&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;px&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;bottom&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;overflow-x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;hidden&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;overflow-y&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;auto&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;section&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;margin&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;px&lt;/span&gt;

&lt;span class=&quot;nc&quot;&gt;.navbar-nav&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;li&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;.loader&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;margin&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;12&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;px&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;24&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;px&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;px&lt;/span&gt;

&lt;span class=&quot;nc&quot;&gt;.pictureDetail&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;max-width&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;425&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;px&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h1&gt;Configuring our paths&lt;/h1&gt;

&lt;p&gt;Now, since the end goal is to compile the &lt;code&gt;.sass&lt;/code&gt; file and output it as &lt;code&gt;.css&lt;/code&gt;, we need to tell gulp where to find the &lt;code&gt;.sass&lt;/code&gt; file and we need to instruct our &lt;code&gt;index.html&lt;/code&gt; to read the new &lt;code&gt;.css&lt;/code&gt;. The skeleton navigation project is already configured to output all compiled files to the &lt;code&gt;/dist&lt;/code&gt; folder and we&amp;#39;re going to continue using that convention. We can instruct gulp where to find the new &lt;code&gt;.sass&lt;/code&gt; file by modifying the &lt;code&gt;build/paths.js&lt;/code&gt; file.&lt;/p&gt;

&lt;h4&gt;build/paths.js&lt;/h4&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;nx&quot;&gt;module&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;exports&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;style&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;styles/**/*.sass&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;output&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;dist/&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;index.html&lt;/h4&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
    ...
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;link&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;rel=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;stylesheet&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;text/css&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;dist/styles.css&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    ...
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;body&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;aurelia-app&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    ...
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h1&gt;Adding the build task&lt;/h1&gt;

&lt;p&gt;Finally, we add a new &lt;code&gt;build-css&lt;/code&gt; task to gulp. Since the task builds css, we will include it with our other build tasks in the &lt;code&gt;build/tasks/build.js&lt;/code&gt; file. We will also make sure that the watch task in the &lt;code&gt;build/tasks.watch.js&lt;/code&gt; knows about our new &lt;code&gt;build-css&lt;/code&gt; task.&lt;/p&gt;

&lt;h4&gt;build/tasks/build.js&lt;/h4&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// First, we need to import gulp-sass which we installed in step 1.&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;sass&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;gulp-sass&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Next, we add a new task for building css.&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;gulp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;build-css&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;// We instruct gulp to pull the source from the path we specified in step 3.&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;gulp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;paths&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;style&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// The plumber step will ensure that if we write syntactically invalid &lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// sass, even though the step won&amp;#39;t run, the gulp task won&amp;#39;t exit. This&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// is helpful because it allows us to fix our syntax without having to &lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// restart the gulp watch task.&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;pipe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;plumber&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// The changed step will analyze which files have changed and require&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// rebuilding.&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;pipe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;changed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;paths&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;output&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;extension&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;.css&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}))&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// The sourcemaps step will automatically generate sourcemaps.&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;pipe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;sourcemaps&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// The sass step will compile the sass. We need to specify that we are&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// using the indented syntax. This is not necessary when using scss.&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;pipe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;sass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;indentedSyntax&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}))&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// And our last steps write the output and sourcemaps to the build&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// destination. Recall from step 3 that this is dist/.&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;pipe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;sourcemaps&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;pipe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;gulp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;dest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;paths&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;output&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;gulp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;build&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;callback&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;runSequence&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;s1&quot;&gt;&amp;#39;clean&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// Finally, we append our new build-css task to the general build task.&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// This will link build-css into the general build task which is used&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// in the gulp watch task.&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;build-system&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;build-html&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;build-css&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;callback&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;build/tasks/watch.js&lt;/h4&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;nx&quot;&gt;gulp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;watch&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;serve&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;gulp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;watch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;paths&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;style&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;build-css&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;browserSync&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;reload&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;change&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;reportChange&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h1&gt;Notes&lt;/h1&gt;

&lt;p&gt;This general process should work for other css preprocessors, including scss and less. In fact, the gulp-sass library will also compile &lt;code&gt;.scss&lt;/code&gt; files. Make sure that you update your extensions in all of the steps above from &lt;code&gt;.sass&lt;/code&gt; to your source of choice. Additionally, if you are using scss, you do not need the &lt;code&gt;{indentedSyntax: true}&lt;/code&gt; argument, and can simply write &lt;code&gt;.pipe(sass())&lt;/code&gt;.&lt;/p&gt;

&lt;h1&gt;Links&lt;/h1&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/davismj/skeleton-navigation-sass&quot;&gt;Full source on GitHub&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;http://sass-lang.com/&quot;&gt;Sass Website&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;http://lesscss.org/&quot;&gt;Less Website&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Mon, 20 Apr 2015 00:00:00 -0400</pubDate>
        <link>http://davismj.me//blog/building-sass/</link>
        <guid isPermaLink="true">http://davismj.me//blog/building-sass/</guid>
      </item>
    
      <item>
        <title>Aurelia Custom Attributes</title>
        <description>&lt;p&gt;We&amp;#39;re going to create a simple demo that allows us to write and preview markdown in real time. To accomplish this, we are going to create an Aurelia &lt;strong&gt;Custom Attribute&lt;/strong&gt; that reads and formats markdown. This particular example uses the new ES7 syntax in the Babel 5.0 transpiler.&lt;/p&gt;

&lt;h1&gt;What is a Custom Attribute?&lt;/h1&gt;

&lt;p&gt;Many HTML elements come with attributes that affect how the element looks or behaves. A common example is the &lt;code&gt;&amp;lt;input /&amp;gt;&lt;/code&gt; element. Without any attributes, the &lt;code&gt;&amp;lt;input /&amp;gt;&lt;/code&gt; element is a simple text box. However, if we modify the type attribute &lt;code&gt;&amp;lt;input type=&amp;quot;button&amp;quot; /&amp;gt;&lt;/code&gt;, the input element becomes a button. Using an attribute allows us to describe the look and behavior of the element without writing any code.&lt;/p&gt;

&lt;p&gt;One of the hallmarks of a well written Aurelia application is a clear &lt;em&gt;separation of concerns&lt;/em&gt;; the code that describes the logic of our application should not need to know about the specifics of where and how it is used in the HTML. To help us achieve this, Aurelia allows us to define new HTML attributes, called &lt;strong&gt;Custom Attributes&lt;/strong&gt;, that work similarly to HTML attributes. Once we define a Custom Attribute in code we can use it throughout our HTML without writing any additional code.&lt;/p&gt;

&lt;h1&gt;How to write a Custom Attribute&lt;/h1&gt;

&lt;p&gt;For our example, we&amp;#39;re going to write a custom attribute that instructs the HTML element to read and format markdown code.&lt;/p&gt;

&lt;h4&gt;markdown.editor.js&lt;/h4&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// In our viewModel, we define the default markdown text using the&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// ES7 Class Properties syntax.&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;MarkdownEditor&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;mymarkdowntext&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;##markdown\n###is\n#awesome&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;markdown.editor.html&lt;/h4&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;template&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- In our view, we tell Aurelia that we depend on something from the &lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;    file &amp;quot;components/markdown.js&amp;quot;. Aurelia will inspect the file and register&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;    all the things inside automagically. --&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;require&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;from=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;components/markdown&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/require&amp;gt;&lt;/span&gt;

  &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- We use the markdown custom attribute and bind it to the value &lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;    &amp;quot;mymarkdowntext&amp;quot; from our viewModel. --&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;markdown&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;bind=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;mymarkdowntext&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/template&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;components/markdown.js&lt;/h4&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// The first thing we need to do is import our dependencies. Here, we&amp;#39;re using&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// the inject decorator from aurelia-framework and Showdown, a markdown parser.&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;inject&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;aurelia-framework&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Showdown&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;showdown&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// We create a class called MarkdownCustomAttribute. By giving it this name, we &lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// instruct Aurelia to create a custom attribute called &amp;quot;markdown&amp;quot;. When Aurelia&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// finds an HTML element with the &amp;quot;markdown&amp;quot; attribute, it will create a new &lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// instance of this class for that attribute. By decorating the class with the &lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// @inject(Element) decorator, we tell Aurelia to pass the HTML element as an &lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// argument to the constructor function.&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;inject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Element&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;MarkdownCustomAttribute&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;  

  &lt;span class=&quot;c1&quot;&gt;// In our constructor, we capture the HTML element corresponding to this &lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// instance of the markdown attribute. We also instantiate a new Showdown&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// converter object.&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;constructor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;element&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;element&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;element&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;converter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Showdown&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;converter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;// If the custom attribute is bound to a variable--in our case, it is bound to&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// mymarkdowntext--then Aurelia will call the valueChanged function when the &lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// value of that variable changes. When the variable of our attribute changes,&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// we want to read and format that value as markdown and insert the output &lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// into the innerHTML of our element.&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;valueChanged&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;newValue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;oldValue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;element&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;innerHTML&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;converter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;makeHtml&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
          &lt;span class=&quot;nx&quot;&gt;newValue&lt;/span&gt;
              &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;\n&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
              &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;line&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;line&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;trim&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
              &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;\n&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h1&gt;Notes&lt;/h1&gt;

&lt;p&gt;This particular example uses Aurelia &lt;em&gt;conventions&lt;/em&gt; to keep things simple. By default, when you create a class for a custom attribute that follows the naming convention &lt;code&gt;{AttributeName}CustomAttribute&lt;/code&gt;, Aurelia does some work behind the scenes to register your Custom Attribute and make it bindable to a single variable. Additionally, it listens to that variable and calls the &lt;code&gt;valueChanged&lt;/code&gt; function whenever that value changes. However, all of these conventions are configurable. We will take a look at a more advanced example in a future post.&lt;/p&gt;

&lt;h1&gt;Links&lt;/h1&gt;

&lt;p&gt;&lt;a href=&quot;https://davismj.github.io/aurelia-ide/#/markdown-preview&quot;&gt;Live example&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;https://github.com/davismj/aurelia-ide&quot;&gt;Full source on GitHub&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;http://babeljs.io/blog/2015/03/31/5.0.0/&quot;&gt;Babel 5 release notes&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;https://github.com/showdownjs/showdown&quot;&gt;Showdown docs&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Sat, 11 Apr 2015 00:00:00 -0400</pubDate>
        <link>http://davismj.me//blog/custom-attributes-part-1/</link>
        <guid isPermaLink="true">http://davismj.me//blog/custom-attributes-part-1/</guid>
      </item>
    
      <item>
        <title>Announcing Kyu!</title>
        <description>&lt;p&gt;In response to overwhelming community support, I&#39;m elated to announce development has begun on my first game, &lt;b&gt;Kyu&lt;/b&gt;. Kyu is a competitive card game played on a 3x3 grid. The gameplay is heavily borrowed from Triple Triad, the card minigame from Final Fantasy VIII.&lt;/p&gt;

&lt;p&gt;Since this project started through community support, I want its progress to be accountable to the community. Therefore I want to announce three special features of Kyu development:&lt;/p&gt;
&lt;ol&gt;
	&lt;li&gt;&lt;a href=&quot;http://davismj.me/blog/tagged/kyu/&quot; target=&quot;_blank&quot;&gt;
		Ongoing development and design choices will be captured in a blog.
	&lt;/a&gt;&lt;/li&gt;
	&lt;li&gt;&lt;a href=&quot;https://github.com/davismj/kyu&quot; target=&quot;_blank&quot;&gt;
		Source is publically available on GitHub.
	&lt;/a&gt;&lt;/li&gt;
	&lt;li&gt;&lt;a href=&quot;https://gitter.im/davismj/kyu&quot; target=&quot;_blank&quot;&gt;
		A dedicated Gitter room has been created for the project.
	&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h1&gt;Project Roadmap&lt;/h1&gt;
&lt;p&gt;Kyu will have three discrete parts that will developed in three separate phases. The first part is a library, written in ECMAScript 6, that handles all of the gameplay. The next part is a sever application, built on nodejs/Express 4, which will handle accepting input, processing and storing the result of the input in a database, and passing back the result. The final part is a web-based application, based on HTML5, which will be made public for all to play.&lt;/p&gt;

&lt;p&gt;These design choices are subject to change. The goal is to create a library robust enough to enable snappy, responsive gameplay on the client, but secure, unexploitable results on the backend.&lt;/p&gt;

&lt;p&gt;I&#39;m grateful to all for your support. I&#39;m looking forward to building our first game together!&lt;/p&gt;
</description>
        <pubDate>Mon, 19 Jan 2015 00:00:00 -0500</pubDate>
        <link>http://davismj.me//blog/announcingkyu/</link>
        <guid isPermaLink="true">http://davismj.me//blog/announcingkyu/</guid>
      </item>
    
      <item>
        <title>Developer Blog</title>
        <description>&lt;p&gt;I&#39;ve put about three months work into places. The app has undergone a great number of architecture changes and redesigns along the way. I&#39;ve learned a great deal. My one regret is that I haven&#39;t been documenting my findings, and so I&#39;ve decided to start a blog.&lt;/p&gt;

&lt;p&gt;There are many things I want to accomplish with this developer blog. First and foremost, I believe that maintaining a developer blog will force me to think deeper about most of the issues that I face, and serve as a sort of &quot;rubber ducky&quot; debugging scheme. I also want to have some documentation of my design choices, both to expose what is going on in my head (which I hope is good and will inspire confidence) and to refer back to in the future. Lastly, I want to share all of what I&#39;ve learned as a way of giving to the community.&lt;/p&gt;

&lt;p&gt;In addition to places--because its always a good idea to jump on something new when you&#39;re halfway done with what you&#39;re currently working on--a new, smaller app might be in the works in the next week. I&#39;m looking forward to documenting my progress with that app as well.&lt;/p&gt;</description>
        <pubDate>Sat, 17 Jan 2015 00:00:00 -0500</pubDate>
        <link>http://davismj.me//blog/devblog/</link>
        <guid isPermaLink="true">http://davismj.me//blog/devblog/</guid>
      </item>
    
      <item>
        <title>Blue Sky, Sweet Rain</title>
        <description>&lt;p&gt;Joel Piedt at Carrousel had a vision to create an interactive music experience that would be the first of its kind. After consulting with various developers, only Foursails was able to take on the challenge. With our expertise in cutting edge HTML5 APIs, including WebAudio, along with some help from the 360 video specialists at Kolor, Foursails was able to create a truly immerseve 360 listening experience.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/davismj/bluesky360&quot;&gt;Source is available in GitHub.&lt;/a&gt;&lt;/p&gt;

&lt;br /&gt;
&lt;iframe height=&quot;480&quot; width=&quot;900&quot; src=&quot;http://http://davismj.github.io/bluesky360/&quot;&gt;&lt;/iframe&gt;</description>
        <pubDate>Wed, 01 Oct 2014 00:00:00 -0400</pubDate>
        <link>http://davismj.me//blog/bluesky/</link>
        <guid isPermaLink="true">http://davismj.me//blog/bluesky/</guid>
      </item>
    
  </channel>
</rss>